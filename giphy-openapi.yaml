openapi: 3.0.0
info:
  title: Giphy API
  version: '1.0.0'
  description: |
    The Giphy API allows you to search, upload, and manage GIFs and stickers. It provides endpoints to access trending content, search for specific GIFs, translate phrases into GIFs, and more.
servers:
  - url: https://api.giphy.com/v1
    description: Giphy API server
  - url: https://api.giphy.com/v2
    description: Giphy API v2 server (for emoji endpoints)
  - url: https://upload.giphy.com/v1
    description: Giphy Upload API server
paths:
  /gifs/trending:
    get:
      summary: Trending GIFs
      description: Returns a list of the most relevant and engaging GIFs each and every day.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: limit
          in: query
          description: The maximum number of objects to return. (Default: 25)
          required: false
          schema:
            type: integer
            default: 25
        - name: offset
          in: query
          description: |
            Specifies the starting position of the results.

            Default: 0

            Maximum: 499
          required: false
          schema:
            type: integer
            default: 0
            maximum: 499
        - $ref: '#/components/parameters/rating'
        - name: random_id
          in: query
          description: An ID/proxy for a specific user.
          required: false
          schema:
            type: string
        - name: bundle
          in: query
          description: Returns only renditions that correspond to the named bundle.
          required: false
          schema:
            type: string
            enum: [messaging_non_clips]
      responses:
        '200':
          description: Successful response with a list of trending GIFs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendingResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /stickers/trending:
    get:
      summary: Trending Stickers
      description: Returns a list of the most relevant and engaging stickers each and every day.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: limit
          in: query
          description: The maximum number of objects to return. (Default: 25)
          required: false
          schema:
            type: integer
            default: 25
        - name: offset
          in: query
          description: |
            Specifies the starting position of the results.

            Default: 0

            Maximum: 499
          required: false
          schema:
            type: integer
            default: 0
            maximum: 499
        - $ref: '#/components/parameters/rating'
        - name: random_id
          in: query
          description: An ID/proxy for a specific user.
          required: false
          schema:
            type: string
        - name: bundle
          in: query
          description: Returns only renditions that correspond to the named bundle.
          required: false
          schema:
            type: string
            enum: [messaging_non_clips]
      responses:
        '200':
          description: Successful response with a list of trending stickers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendingResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /gifs/search:
    get:
      summary: Search GIFs
      description: |
        GIPHY Search gives you instant access to our library of millions of GIFs by entering a word or phrase.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: q
          in: query
          description: |
            Search query term or phrase.

            Adding `@<username>` anywhere in the `q` parameter effectively changes the search query to be a search for a specific userâ€™s GIFs (user has to be public and verified by GIPHY).

            If the `q` parameter contains one of these words: `sticker`, `stickers`, or `transparent`, the search will return sticker content.

            Maximum length: 50 characters.
          required: true
          schema:
            type: string
            maxLength: 50
        - name: limit
          in: query
          description: The maximum number of objects to return. (Default: 25). For beta keys max limit is 50.
          required: false
          schema:
            type: integer
            default: 25
            maximum: 50
        - name: offset
          in: query
          description: |
            Specifies the starting position of the results.

            Default: 0

            Maximum: 4999
          required: false
          schema:
            type: integer
            default: 0
            maximum: 4999
        - $ref: '#/components/parameters/rating'
        - name: lang
          in: query
          description: Specify default language for regional content; use a 2-letter ISO 639-1 language code.
          required: false
          schema:
            type: string
            minLength: 2
            maxLength: 2
        - name: random_id
          in: query
          description: An ID/proxy for a specific user.
          required: false
          schema:
            type: string
        - name: bundle
          in: query
          description: Returns only renditions that correspond to the named bundle.
          required: false
          schema:
            type: string
            enum: [messaging_non_clips]
      responses:
        '200':
          description: Successful response with search results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /stickers/search:
    get:
      summary: Search Stickers
      description: |
        GIPHY Search gives you instant access to our library of millions of stickers by entering a word or phrase.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: q
          in: query
          description: As above.
          required: true
          schema:
            type: string
            maxLength: 50
        - name: limit
          in: query
          description: As above.
          required: false
          schema:
            type: integer
            default: 25
            maximum: 50
        - name: offset
          in: query
          description: As above.
          required: false
          schema:
            type: integer
            default: 0
            maximum: 4999
        - $ref: '#/components/parameters/rating'
        - name: lang
          in: query
          description: As above.
          required: false
          schema:
            type: string
            minLength: 2
            maxLength: 2
        - name: random_id
          in: query
          description: As above.
          required: false
          schema:
            type: string
        - name: bundle
          in: query
          description: As above.
          required: false
          schema:
            type: string
            enum: [messaging_non_clips]
      responses:
        '200':
          description: Successful response with sticker search results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /gifs/translate:
    get:
      summary: Translate to GIF
      description: Converts words and phrases to the perfect GIF using GIPHY's special sauce algorithm.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: s
          in: query
          description: |
            Recommends a single GIF based on the supplied term.

            It's possible to use `@` or `#` to help search user channel (`@username`) or GIFs related to hashtag word.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/rating'
        - name: random_id
          in: query
          description: An ID/proxy for a specific user.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a translated GIF.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslateResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /stickers/translate:
    get:
      summary: Translate to Sticker
      description: Converts words and phrases to the perfect sticker using GIPHY's special sauce algorithm.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: s
          in: query
          description: As above.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/rating'
        - name: random_id
          in: query
          description: As above.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a translated sticker.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslateResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /gifs/random:
    get:
      summary: Random GIF
      description: Returns a single random GIF related to the word or phrase entered.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: tag
          in: query
          description: |
            Filters results by specified tag.

            Retrieves any random GIF. You can optimize results by supplying GIF tag `@username` and `rating` query parameters.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/rating'
        - name: random_id
          in: query
          description: An ID/proxy for a specific user.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a random GIF.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /stickers/random:
    get:
      summary: Random Sticker
      description: Returns a single random sticker related to the word or phrase entered.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: tag
          in: query
          description: As above.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/rating'
        - name: random_id
          in: query
          description: As above.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a random sticker.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /randomid:
    get:
      summary: Get Random ID
      description: Generates a unique ID you can assign to each new user in your app.
      parameters:
        - $ref: '#/components/parameters/api_key'
      responses:
        '200':
          description: Successful response with a random ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomIDResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /emoji:
    get:
      summary: Get Emoji
      description: Fetch GIF Objects for the set of GIPHY Emoji.
      servers:
        - url: https://api.giphy.com/v2
      parameters:
        - name: limit
          in: query
          description: The maximum number of objects to return. (Default: 25)
          required: false
          schema:
            type: integer
            default: 25
        - name: offset
          in: query
          description: Specifies the starting position of the results. (Default: 0)
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Successful response with a list of emojis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmojiResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /emoji/{gif_id}/variations:
    get:
      summary: Get Emoji Variations
      description: Fetch the variations associated with a given emoji.
      servers:
        - url: https://api.giphy.com/v2
      parameters:
        - name: gif_id
          in: path
          description: The ID of the emoji GIF.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a list of emoji variations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmojiResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /gifs/{gif_id}:
    get:
      summary: Get GIF by ID
      description: Returns a GIF's metadata based on the GIF ID specified.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: gif_id
          in: path
          description: The ID of the GIF you want details for.
          required: true
          schema:
            type: string
        - name: random_id
          in: query
          description: An ID/proxy for a specific user.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/rating'
      responses:
        '200':
          description: Successful response with GIF metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GIFResponse'
        '4XX':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {}
                  meta:
                    $ref: '#/components/schemas/MetaObject'
        '5XX':
          description: Server Error
  /gifs:
    get:
      summary: Get GIFs by IDs
      description: Returns metadata of multiple GIFs based on the GIF IDs specified.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: ids
          in: query
          description: |
            Filters results by specified GIF IDs, separated by commas.

            Maximum GIF IDs: 100
          required: true
          schema:
            type: string
        - name: random_id
          in: query
          description: An ID/proxy for a specific user.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/rating'
      responses:
        '200':
          description: Successful response with GIFs metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /gifs/categories:
    get:
      summary: Get Categories
      description: Provides users a list of GIF categories on the GIPHY network.
      parameters:
        - $ref: '#/components/parameters/api_key'
      responses:
        '200':
          description: Successful response with categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /gifs/search/tags:
    get:
      summary: Autocomplete
      description: Provides users a list of valid terms that complete the given tag on the GIPHY network.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: q
          in: query
          description: Tag term.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of objects to return. (Default: 5)
          required: false
          schema:
            type: integer
            default: 5
        - name: offset
          in: query
          description: Specifies the starting position of the results. (Default: 0)
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Successful response with autocomplete terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /channels/search:
    get:
      summary: Channel Search
      description: Returns all the GIPHY channels matching the query term.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: q
          in: query
          description: Accepts term to search through GIPHYâ€™s channels.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            The maximum number of objects to return.

            Default: 25

            Maximum: 50
          required: false
          schema:
            type: integer
            default: 25
            maximum: 50
        - name: offset
          in: query
          description: |
            Specifies the starting position of the results.

            Default: 0
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Successful response with channels.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelSearchResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /tags/related/{term}:
    get:
      summary: Search Suggestions
      description: Provides users a list of tag terms related to the given tag on the GIPHY network.
      parameters:
        - $ref: '#/components/parameters/api_key'
        - name: term
          in: path
          description: Tag term.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response with related terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelatedTermsResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
  /trending/searches:
    get:
      summary: Trending Search Terms
      description: Provides users a list of the most popular trending search terms on the GIPHY network.
      parameters:
        - $ref: '#/components/parameters/api_key'
      responses:
        '200':
          description: Successful response with trending search terms.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendingSearchesResponse'
        '4XX':
          description: Client Error
        '5XX':
          description: Server Error
components:
  parameters:
    api_key:
      name: api_key
      in: query
      description: GIPHY API Key.
      required: true
      schema:
        type: string
    rating:
      name: rating
      in: query
      description: |
        Filters results by specified rating.

        Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings.
      required: false
      schema:
        type: string
        enum: [g, pg, pg-13, r]
  schemas:
    GIFObject:
      type: object
      properties:
        type:
          type: string
          description: Type of the object.
          example: "gif"
        id:
          type: string
          description: This GIF's unique ID.
          example: "YsTs5ltWtEhnq"
        url:
          type: string
          description: The unique URL for this GIF.
          example: "http://giphy.com/gifs/confused-flying-YsTs5ltWtEhnq"
        slug:
          type: string
          description: The unique slug used in this GIF's URL.
          example: "confused-flying-YsTs5ltWtEhnq"
        bitly_url:
          type: string
          description: The unique bit.ly URL for this GIF.
          example: "http://gph.is/1gsWDcL"
        embed_url:
          type: string
          description: A URL used for embedding this GIF.
          example: "http://giphy.com/embed/YsTs5ltWtEhnq"
        username:
          type: string
          description: The username this GIF is attached to, if applicable.
          example: "JoeCool4000"
        source:
          type: string
          description: The page on which this GIF was found.
          example: "http://www.reddit.com/r/reactiongifs/comments/1xpyaa/superman_goes_to_hollywood/"
        title:
          type: string
          description: The title that appears on giphy.com for this GIF.
          example: "Happy Dancing GIF"
        alt_text:
          type: string
          description: Alt text enables assistive programs to read descriptions of GIFs.
          example: "Barney the Purple Dinosaur blows out birthday candles."
        rating:
          type: string
          description: The MPAA-style rating for this content.
          example: "g"
        content_url:
          type: string
          description: Currently unused.
        source_tld:
          type: string
          description: The top-level domain of the source URL.
          example: "cheezburger.com"
        source_post_url:
          type: string
          description: The URL of the webpage on which this GIF was found.
          example: "http://cheezburger.com/5282328320"
        is_sticker:
          type: integer
          description: Whether the GIF is a sticker (1) or not (0).
          example: 0
        import_datetime:
          type: string
          description: The creation or upload date from this GIF's source.
          example: "2013-08-01 12:41:48"
        trending_datetime:
          type: string
          description: The date on which this GIF was marked trending, if applicable.
          example: "2013-08-01 12:41:48"
        images:
          type: object
          description: An object containing data for various available formats and sizes of this GIF.
          additionalProperties:
            $ref: '#/components/schemas/ImageRenditionObject'
        user:
          $ref: '#/components/schemas/UserObject'
        analytics_response_payload:
          type: string
          description: Used for action registration.
        analytics:
          $ref: '#/components/schemas/AnalyticsObject'
    ImageRenditionObject:
      type: object
      properties:
        url:
          type: string
          description: The publicly-accessible direct URL for this GIF.
        width:
          type: string
          description: The width of this GIF in pixels.
        height:
          type: string
          description: The height of this GIF in pixels.
        size:
          type: string
          description: The size of this GIF in bytes.
        mp4:
          type: string
          description: The URL for this GIF in .MP4 format.
        mp4_size:
          type: string
          description: The size in bytes of the .MP4 file corresponding to this GIF.
        webp:
          type: string
          description: The URL for this GIF in .webp format.
        webp_size:
          type: string
          description: The size in bytes of the .webp file corresponding to this GIF.
        frames:
          type: string
          description: The number of frames in this GIF.
    MetaObject:
      type: object
      properties:
        status:
          type: integer
          description: HTTP Response Code.
          example: 200
        msg:
          type: string
          description: HTTP Response Message.
          example: "OK"
        response_id:
          type: string
          description: A unique ID paired with this response from the API.
          example: "57eea03c72381f86e05c35d2"
    PaginationObject:
      type: object
      properties:
        total_count:
          type: integer
          description: Total number of items available (not returned on every endpoint).
        count:
          type: integer
          description: Total number of items returned.
        offset:
          type: integer
          description: Position in pagination.
    UserObject:
      type: object
      properties:
        avatar_url:
          type: string
          description: The URL for this user's avatar image.
          example: "https://media1.giphy.com/avatars/election2016/XwYrZi5H87o6.gif"
        banner_url:
          type: string
          description: The URL for the banner image that appears atop this user's profile page.
          example: "https://media4.giphy.com/avatars/cheezburger/XkuejOhoGLE6.jpg"
        profile_url:
          type: string
          description: The URL for this user's GIPHY profile.
          example: "https://giphy.com/cheezburger/"
        username:
          type: string
          description: The username associated with this user.
          example: "joecool4000"
        display_name:
          type: string
          description: The display name associated with this user.
          example: "JoeCool4000"
    RandomIDResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            random_id:
              type: string
              description: Random ID hash.
              example: "3640f6095c9a1f0f4e544b764d238b25"
        meta:
          $ref: '#/components/schemas/MetaObject'
    EmojiResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmojiObject'
        pagination:
          $ref: '#/components/schemas/PaginationObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    EmojiObject:
      allOf:
        - $ref: '#/components/schemas/GIFObject'
        - type: object
          properties:
            variation_count:
              type: integer
              description: The number of variations associated with the emoji.
              example: 4
    TrendingResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GIFObject'
        pagination:
          $ref: '#/components/schemas/PaginationObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    SearchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GIFObject'
        pagination:
          $ref: '#/components/schemas/PaginationObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    TranslateResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/GIFObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    RandomResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/GIFObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    GIFResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/GIFObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    CategoriesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CategoryObject'
        pagination:
          $ref: '#/components/schemas/PaginationObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    AutocompleteResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TermObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    ChannelSearchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChannelObject'
        pagination:
          $ref: '#/components/schemas/PaginationObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    RelatedTermsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TermObject'
        meta:
          $ref: '#/components/schemas/MetaObject'
    TrendingSearchesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
        meta:
          $ref: '#/components/schemas/MetaObject'
    AnalyticsObject:
      type: object
      properties:
        onload:
          type: object
          properties:
            url:
              type: string
              description: The URL to register a 'view' action by a user.
        onclick:
          type: object
          properties:
            url:
              type: string
              description: The URL to register a 'click' action by a user.
        onsent:
          type: object
          properties:
            url:
              type: string
              description: The URL to register a 'send' action by a user.
    CategoryObject:
      type: object
      properties:
        name:
          type: string
          description: Category name.
          example: "category 1"
        name_encoded:
          type: string
          description: Encoded category name.
          example: "category1"
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/SubcategoryObject'
        gif:
          $ref: '#/components/schemas/GIFObject'
    SubcategoryObject:
      type: object
      properties:
        name:
          type: string
          description: Subcategory name.
          example: "sub category 1"
        name_encoded:
          type: string
          description: Encoded subcategory name.
          example: "subcategory1"
    TermObject:
      type: object
      properties:
        name:
          type: string
          description: Term name.
          example: "lol"
    ChannelObject:
      type: object
      properties:
        id:
          type: integer
          description: Channel unique ID.
          example: 42
        url:
          type: string
          description: Channel relative URL.
          example: "/giphystudios"
        display_name:
          type: string
          description: The display name of the channel.
          example: "GIPHY Studios"
        slug:
          type: string
          description: The unique channel slug.
          example: "giphystudios"
        type:
          type: string
          description: Possible values are `community` or `editorial`.
          example: "community"
        user:
          $ref: '#/components/schemas/UserObject'
        description:
          type: string
          description: Channel description.
          example: "GIPHY Studios is making all the GIFs"
